/*
 * nn_adder.h
 * A pre-trained time-predictable artificial neural network, generated by Keras2C.py.
 * Based on ann.h written by keyan
 */

#ifndef NN_ADDER_H_
#define NN_ADDER_H_

#pragma once

// includes
#include "nn_types.h"

// NOTE: only values marked "*" may be changed with defined behaviour

// Network input defines
#define ADDER_INPUT_DIM_COUNT	1
#define ADDER_INPUT_DIM_0	2

// Network output defines
#define ADDER_MAX_PL_LEN 2
#define ADDER_OUTPUT_DIM_COUNT	1
#define ADDER_OUTPUT_DIM_0	1

// Dense layer defines
#define ADDER_L0_DENSE_NEURON_COUNT	5
#define ADDER_L0_DENSE_USE_BIAS	0
#define ADDER_L0_DENSE_ACTIVATION	ACT_ENUM_LINEAR	// *
#define ADDER_L0_DENSE_DIM_COUNT	1
#define ADDER_L0_DENSE_DIM_0	5

// Dense layer defines
#define ADDER_L1_DENSE_NEURON_COUNT	1
#define ADDER_L1_DENSE_USE_BIAS	0
#define ADDER_L1_DENSE_ACTIVATION	ACT_ENUM_LINEAR	// *
#define ADDER_L1_DENSE_DIM_COUNT	1
#define ADDER_L1_DENSE_DIM_0	1

// NN weights struct
typedef struct
{
	// Dense layer unit
	NN_NUM_TYPE adder_l0_dense_weights[ADDER_INPUT_DIM_0][ADDER_L0_DENSE_NEURON_COUNT];
	NN_NUM_TYPE adder_l0_dense_bias[ADDER_L0_DENSE_NEURON_COUNT];
	// Dense layer unit
	NN_NUM_TYPE adder_l1_dense_weights[ADDER_L0_DENSE_DIM_0][ADDER_L1_DENSE_NEURON_COUNT];
	NN_NUM_TYPE adder_l1_dense_bias[ADDER_L1_DENSE_NEURON_COUNT];
} NN_ADDER;

// Static storage
NN_ADDER nn_weights_adder;

// Instance
typedef struct
{
	NN_NUM_TYPE inputs[ADDER_INPUT_DIM_0];
	NN_NUM_TYPE adder_l0_dense_outputs[ADDER_L0_DENSE_DIM_0];
	NN_NUM_TYPE outputs[ADDER_MAX_PL_LEN][ADDER_L1_DENSE_DIM_0];
	

	// Output pipeline
	int pl_index;
} NN_DATA_ADDER;

// Functions
void nn_init_adder();
void run_adder_l0_dense();
void run_adder_l1_dense();

void nn_run_adder(NN_DATA_ADDER *nn_data);

#endif /* NN_ADDER_H_ */