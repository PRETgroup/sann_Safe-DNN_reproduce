/*
 * nn_darknet.h
 * A pre-trained time-predictable artificial neural network, generated by Keras2C.py.
 * Based on ann.h written by keyan
 */

#ifndef NN_DARKNET_H_
#define NN_DARKNET_H_

#pragma once

// includes
#include "nn_types.h"

// NOTE: only values marked "*" may be changed with defined behaviour

// Network input defines
#define DARKNET_INPUT_DIM_COUNT	3
#define DARKNET_INPUT_DIM_0	28
#define DARKNET_INPUT_DIM_1	28
#define DARKNET_INPUT_DIM_2	1

// Network output defines
#define DARKNET_MAX_PL_LEN 2
#define DARKNET_OUTPUT_DIM_COUNT	1
#define DARKNET_OUTPUT_DIM_0	10

// Conv2D layer defines
#define DARKNET_L0_CONV2D_KERNEL_HEIGHT	3
#define DARKNET_L0_CONV2D_KERNEL_WIDTH	3
#define DARKNET_L0_CONV2D_KERNEL_COUNT	16
#define DARKNET_L0_CONV2D_USE_BIAS	1
#define DARKNET_L0_CONV2D_STRIDE_Y	1
#define DARKNET_L0_CONV2D_STRIDE_X	1
#define DARKNET_L0_CONV2D_ACTIVATION	ACT_ENUM_RELU	// *
#define DARKNET_L0_CONV2D_PADDING_VALID	1
#define DARKNET_L0_CONV2D_DIM_COUNT	3
#define DARKNET_L0_CONV2D_DIM_0	26
#define DARKNET_L0_CONV2D_DIM_1	26
#define DARKNET_L0_CONV2D_DIM_2	16

// MaxPooling2D layer defines
#define DARKNET_L1_MAXPOOLING2D_HEIGHT	2
#define DARKNET_L1_MAXPOOLING2D_WIDTH	2
#define DARKNET_L1_MAXPOOLING2D_STRIDE_Y	2
#define DARKNET_L1_MAXPOOLING2D_STRIDE_X	2
#define DARKNET_L1_MAXPOOLING2D_PADDING_VALID	1
#define DARKNET_L1_MAXPOOLING2D_DIM_COUNT	3
#define DARKNET_L1_MAXPOOLING2D_DIM_0	13
#define DARKNET_L1_MAXPOOLING2D_DIM_1	13
#define DARKNET_L1_MAXPOOLING2D_DIM_2	16

// Conv2D layer defines
#define DARKNET_L2_CONV2D_KERNEL_HEIGHT	3
#define DARKNET_L2_CONV2D_KERNEL_WIDTH	3
#define DARKNET_L2_CONV2D_KERNEL_COUNT	32
#define DARKNET_L2_CONV2D_USE_BIAS	1
#define DARKNET_L2_CONV2D_STRIDE_Y	1
#define DARKNET_L2_CONV2D_STRIDE_X	1
#define DARKNET_L2_CONV2D_ACTIVATION	ACT_ENUM_RELU	// *
#define DARKNET_L2_CONV2D_PADDING_VALID	1
#define DARKNET_L2_CONV2D_DIM_COUNT	3
#define DARKNET_L2_CONV2D_DIM_0	11
#define DARKNET_L2_CONV2D_DIM_1	11
#define DARKNET_L2_CONV2D_DIM_2	32

// MaxPooling2D layer defines
#define DARKNET_L3_MAXPOOLING2D_HEIGHT	2
#define DARKNET_L3_MAXPOOLING2D_WIDTH	2
#define DARKNET_L3_MAXPOOLING2D_STRIDE_Y	2
#define DARKNET_L3_MAXPOOLING2D_STRIDE_X	2
#define DARKNET_L3_MAXPOOLING2D_PADDING_VALID	1
#define DARKNET_L3_MAXPOOLING2D_DIM_COUNT	3
#define DARKNET_L3_MAXPOOLING2D_DIM_0	5
#define DARKNET_L3_MAXPOOLING2D_DIM_1	5
#define DARKNET_L3_MAXPOOLING2D_DIM_2	32

// Flatten layer defines
#define DARKNET_L4_FLATTEN_DIM_COUNT	1
#define DARKNET_L4_FLATTEN_DIM_0	800

// Dense layer defines
#define DARKNET_L5_DENSE_NEURON_COUNT	10
#define DARKNET_L5_DENSE_USE_BIAS	1
#define DARKNET_L5_DENSE_ACTIVATION	ACT_ENUM_SOFTMAX	// *
#define DARKNET_L5_DENSE_DIM_COUNT	1
#define DARKNET_L5_DENSE_DIM_0	10

// NN weights struct
typedef struct
{
	// Conv2D layer unit
	NN_NUM_TYPE darknet_l0_conv2d_kernel_weights[DARKNET_L0_CONV2D_KERNEL_HEIGHT][DARKNET_L0_CONV2D_KERNEL_WIDTH][DARKNET_INPUT_DIM_2][DARKNET_L0_CONV2D_KERNEL_COUNT];
	NN_NUM_TYPE darknet_l0_conv2d_kernel_bias[DARKNET_L0_CONV2D_KERNEL_COUNT];
	// MaxPooling2D layer unit
	// Conv2D layer unit
	NN_NUM_TYPE darknet_l2_conv2d_kernel_weights[DARKNET_L2_CONV2D_KERNEL_HEIGHT][DARKNET_L2_CONV2D_KERNEL_WIDTH][DARKNET_L1_MAXPOOLING2D_DIM_2][DARKNET_L2_CONV2D_KERNEL_COUNT];
	NN_NUM_TYPE darknet_l2_conv2d_kernel_bias[DARKNET_L2_CONV2D_KERNEL_COUNT];
	// MaxPooling2D layer unit
	// Flatten layer unit
	// Dense layer unit
	NN_NUM_TYPE darknet_l5_dense_weights[DARKNET_L4_FLATTEN_DIM_0][DARKNET_L5_DENSE_NEURON_COUNT];
	NN_NUM_TYPE darknet_l5_dense_bias[DARKNET_L5_DENSE_NEURON_COUNT];
} NN_DARKNET;

// Static storage
NN_DARKNET nn_weights_darknet;

// Instance
typedef struct
{
	NN_NUM_TYPE inputs[DARKNET_INPUT_DIM_0][DARKNET_INPUT_DIM_1][DARKNET_INPUT_DIM_2];
	NN_NUM_TYPE darknet_l0_conv2d_outputs[DARKNET_L0_CONV2D_DIM_0][DARKNET_L0_CONV2D_DIM_1][DARKNET_L0_CONV2D_DIM_2];
	NN_NUM_TYPE darknet_l1_maxpooling2d_outputs[DARKNET_L1_MAXPOOLING2D_DIM_0][DARKNET_L1_MAXPOOLING2D_DIM_1][DARKNET_L1_MAXPOOLING2D_DIM_2];
	NN_NUM_TYPE darknet_l2_conv2d_outputs[DARKNET_L2_CONV2D_DIM_0][DARKNET_L2_CONV2D_DIM_1][DARKNET_L2_CONV2D_DIM_2];
	NN_NUM_TYPE darknet_l3_maxpooling2d_outputs[DARKNET_L3_MAXPOOLING2D_DIM_0][DARKNET_L3_MAXPOOLING2D_DIM_1][DARKNET_L3_MAXPOOLING2D_DIM_2];
	NN_NUM_TYPE darknet_l4_flatten_outputs[DARKNET_L4_FLATTEN_DIM_0];
	NN_NUM_TYPE outputs[DARKNET_MAX_PL_LEN][DARKNET_L5_DENSE_DIM_0];
	

	// Output pipeline
	int pl_index;
} NN_DATA_DARKNET;

// Functions
void nn_init_darknet();
void run_darknet_l0_conv2d();
void run_darknet_l1_maxpooling2d();
void run_darknet_l2_conv2d();
void run_darknet_l3_maxpooling2d();
void run_darknet_l4_flatten();
void run_darknet_l5_dense();

void nn_run_darknet(NN_DATA_DARKNET *nn_data);

#endif /* NN_DARKNET_H_ */