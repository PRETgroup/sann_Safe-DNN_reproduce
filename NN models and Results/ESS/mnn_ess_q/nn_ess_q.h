/*
 * nn_ess_q.h
 * A pre-trained time-predictable artificial neural network, generated by Keras2C.py.
 * Based on ann.h written by keyan
 */

#ifndef NN_ESS_Q_H_
#define NN_ESS_Q_H_

#pragma once

// includes
#include "nn_types.h"

// NOTE: only values marked "*" may be changed with defined behaviour

// Network input defines
#define ESS_Q_INPUT_DIM_COUNT	1
#define ESS_Q_INPUT_DIM_0	21

// Network output defines
#define ESS_Q_MAX_PL_LEN 2
#define ESS_Q_OUTPUT_DIM_COUNT	1
#define ESS_Q_OUTPUT_DIM_0	41

// Dense layer defines
#define ESS_Q_L0_DENSE_NEURON_COUNT	10
#define ESS_Q_L0_DENSE_USE_BIAS	1
#define ESS_Q_L0_DENSE_ACTIVATION	ACT_ENUM_SOFTMAX	// *
#define ESS_Q_L0_DENSE_DIM_COUNT	1
#define ESS_Q_L0_DENSE_DIM_0	10

// Dense layer defines
#define ESS_Q_L1_DENSE_NEURON_COUNT	41
#define ESS_Q_L1_DENSE_USE_BIAS	1
#define ESS_Q_L1_DENSE_ACTIVATION	ACT_ENUM_LINEAR	// *
#define ESS_Q_L1_DENSE_DIM_COUNT	1
#define ESS_Q_L1_DENSE_DIM_0	41

// NN weights struct
typedef struct
{
	// Dense layer unit
	NN_NUM_TYPE ess_q_l0_dense_weights[ESS_Q_INPUT_DIM_0][ESS_Q_L0_DENSE_NEURON_COUNT];
	NN_NUM_TYPE ess_q_l0_dense_bias[ESS_Q_L0_DENSE_NEURON_COUNT];
	// Dense layer unit
	NN_NUM_TYPE ess_q_l1_dense_weights[ESS_Q_L0_DENSE_DIM_0][ESS_Q_L1_DENSE_NEURON_COUNT];
	NN_NUM_TYPE ess_q_l1_dense_bias[ESS_Q_L1_DENSE_NEURON_COUNT];
} NN_ESS_Q;

// Static storage
NN_ESS_Q nn_weights_ess_q;

// Instance
typedef struct
{
	NN_NUM_TYPE inputs[ESS_Q_INPUT_DIM_0];
	NN_NUM_TYPE ess_q_l0_dense_outputs[ESS_Q_L0_DENSE_DIM_0];
	NN_NUM_TYPE outputs[ESS_Q_MAX_PL_LEN][ESS_Q_L1_DENSE_DIM_0];
	

	// Output pipeline
	int pl_index;
} NN_DATA_ESS_Q;

// Functions
void nn_init_ess_q();
void run_ess_q_l0_dense();
void run_ess_q_l1_dense();

void nn_run_ess_q(NN_DATA_ESS_Q *nn_data);

#endif /* NN_ESS_Q_H_ */